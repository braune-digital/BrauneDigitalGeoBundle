parameters:
    braune_digital.geo.request.param_converter.country.class: 'BrauneDigital\GeoBundle\Request\ParamConverter\CountryParamConverter'
    braune_digital.geo.request.param_converter.country.priority: 10
    braune_digital.geo.request.param_converter.city.class: 'BrauneDigital\GeoBundle\Request\ParamConverter\CityParamConverter'
    braune_digital.geo.request.param_converter.city.priority: 10
    braune_digital.geo.update.class: 'BrauneDigital\GeoBundle\Services\Update'
    braune_digital.geo.city.admin.class: 'BrauneDigital\GeoBundle\Admin\CityAdmin'
    braune_digital.geo.country.admin.class: 'BrauneDigital\GeoBundle\Admin\CountryAdmin'


services:
    braune_digital.geo.update:
        class: '%braune_digital.geo.update.class%'
        arguments: ['@doctrine.orm.entity_manager', '@service_container']

    sonata.admin.braunedigital.geo.city:
        class: '%braune_digital.geo.city.admin.class%'
        tags:
            - { name: sonata.admin, manager_type: orm, group: "BrauneDigital Geo", label: "Cities" }
        arguments:
            - ~
            - 'Application\BrauneDigital\GeoBundle\Entity\City'
            - ~
        calls:
            - [ setTranslationDomain, [BrauneDigitalGeoBundle]]
            - [ setContainer, [ '@service_container']]

    sonata.admin.braunedigital.geo.country:
        class: '%braune_digital.geo.country.admin.class%'
        tags:
            - { name: sonata.admin, manager_type: orm, group: "BrauneDigital Geo", label: "Countries" }
        arguments:
            - ~
            - 'Application\BrauneDigital\GeoBundle\Entity\Country'
            - ~
        calls:
            - [ setTranslationDomain, [BrauneDigitalGeoBundle]]

    braune_digital.geo.request.param_converter.city:
        class: "%braune_digital.geo.request.param_converter.city.class%"
        arguments: ['@doctrine.orm.entity_manager']
        tags:
            - { name: request.param_converter, converter: city, priority: '%braune_digital.geo.request.param_converter.city.priority%' }

    braune_digital.geo.request.param_converter.country:
        class: "%braune_digital.geo.request.param_converter.country.class%"
        arguments: ['@doctrine.orm.entity_manager']
        tags:
            - { name: request.param_converter, converter: country, priority: '%braune_digital.geo.request.param_converter.country.priority%' }


    ### Validators
    braune_digital.geo.validator.has_location:
        class: 'Stagedeal\AppBundle\Validator\Constraints\HasLocationValidator'
        tags:
            - { name: validator.constraint_validator, alias: has_location }
